import pytest

from .. import ShanonFanoCoder


@pytest.mark.parametrize(
    'input_sting, expected_string_size, expected_code, expected_code_sep, expected_code_size, expected_codes_table',
    (
        (
            'this is a test string', 
            21 * 8,
            '011111111000100010001000111100001'
            '111100100110001001111011001100101',
            (
                '011',  # t
                '11111',  # h
                '100',  # i
                '010',  # s
                '00',  # ' '
                '100',  # i
                '010',  # s
                '00',  # ' '
                '11110',  # a
                '00',  # ' '
                '011',  # t
                '1110',  # e
                '010',  # s
                '011',  # t
                '00',  # ' '
                '010',  # s
                '011',  # t
                '1101',  # r
                '100',  # i
                '1100',  # n
                '101'  # g
            ), 
            66, 
            {
                'h': '11111',
                'a': '11110',
                'e': '1110',
                'r': '1101',
                'n': '1100',
                'g': '101',
                'i': '100',
                't': '011',
                's': '010',
                ' ': '00',
            }
        ),
        (
            'a quick brown fox jumps over the lazy dog. A QUICK BROWN FOX JUMPS OVER THE LAZY DOG.',
            85 * 8,
            '0111110001111111011110111111011111011110110'
            '0011110100111001001111001110111000111011001'
            '0011101000011100101111011100011011111101110'
            '0000100110110011011011100001101011101000110'
            '1100011001110111111100110110010000110001010'
            '0110000011010000011000001011111010111101111'
            '0101110101101100010110100101100011011001010'
            '1110001010110001101010000101001010111101000'
            '1001111100111000000110011001010010110000100'
            '1011001000101000010001110110010001101000100'
            '00100001001100000011010',
            ('011111', '000', '1111111', '011110', '1111110', 
            '111110', '1111011', '000', '1111010', '01110', 
            '0100', '111100', '1110111', '000', '1110110', '0100', 
            '111010', '000', '111001', '011110', '111000', '1101111', 
            '1101110', '000', '0100', '110110', '011011', '01110', 
            '000', '110101', '110100', '011011', '000', '1100111', 
            '011111', '1100110', '110010', '000', '110001', '0100', 
            '110000', '011010', '000', '01100', '000', '1011111', 
            '010111', '1011110', '101110', '1011011', '000', '1011010', 
            '010110', '001', '101100', '1010111', '000', '1010110', 
            '001', '101010', '000', '101001', '010111', '101000', 
            '1001111', '1001110', '000', '001', '100110', '01010', 
            '010110', '000', '100101', '100100', '01010', '000', 
            '1000111', '01100', '1000110', '100010', '000', '100001', 
            '001', '100000', '011010'),
            453,
            {"q": "1111111", "i": "1111110", "c": "111110", 
            "k": "1111011", "b": "1111010", "w": "111100", 
            "n": "1110111", "f": "1110110", "x": "111010", 
            "j": "111001", "m": "111000", "p": "1101111", 
            "s": "1101110", "v": "110110", "t": "110101", 
            "h": "110100", "l": "1100111", "z": "1100110", 
            "y": "110010", "d": "110001", "g": "110000", 
            "Q": "1011111", "I": "1011110", "C": "101110", 
            "K": "1011011", "B": "1011010", "W": "101100", 
            "N": "1010111", "F": "1010110", "X": "101010", 
            "J": "101001", "M": "101000", "P": "1001111", 
            "S": "1001110", "V": "100110", "T": "100101", 
            "H": "100100", "L": "1000111", "Z": "1000110", 
            "Y": "100010", "D": "100001", "G": "100000", 
            "a": "011111", "u": "011110", "r": "01110", 
            "e": "011011", ".": "011010", "A": "01100", 
            "U": "010111", "R": "010110", "E": "01010", 
            "o": "0100", "O": "001", " ": "000"},
        )
    ),
)
def test_shanon_fano_coder_encode(input_sting, expected_string_size, expected_code, expected_code_sep, expected_code_size, expected_codes_table):
    coder = ShanonFanoCoder()

    encoded = coder.encode(input_sting)

    assert encoded.string_size == expected_string_size
    assert encoded.code_size == expected_code_size

    assert encoded.code == expected_code
    assert encoded.code_sep == expected_code_sep
    assert encoded.codes_table == expected_codes_table


@pytest.mark.parametrize(
    'input_code, decoder, expected_code_size, expected_string_size, expected_string',
    (
        (
            '011111111000100010001000111100001111100100110001001111011001100101', 
            {
                'h': '11111',
                'a': '11110',
                'e': '1110',
                'r': '1101',
                'n': '1100',
                'g': '101',
                'i': '100',
                't': '011',
                's': '010',
                ' ': '00',
            },
            66,
            21 * 8,
            'this is a test string',
        ),
        (
            '0111110001111111011110111111011111011110110'
            '0011110100111001001111001110111000111011001'
            '0011101000011100101111011100011011111101110'
            '0000100110110011011011100001101011101000110'
            '1100011001110111111100110110010000110001010'
            '0110000011010000011000001011111010111101111'
            '0101110101101100010110100101100011011001010'
            '1110001010110001101010000101001010111101000'
            '1001111100111000000110011001010010110000100'
            '1011001000101000010001110110010001101000100'
            '00100001001100000011010',
            {"q": "1111111", "i": "1111110", "c": "111110", 
            "k": "1111011", "b": "1111010", "w": "111100", 
            "n": "1110111", "f": "1110110", "x": "111010", 
            "j": "111001", "m": "111000", "p": "1101111", 
            "s": "1101110", "v": "110110", "t": "110101", 
            "h": "110100", "l": "1100111", "z": "1100110", 
            "y": "110010", "d": "110001", "g": "110000", 
            "Q": "1011111", "I": "1011110", "C": "101110", 
            "K": "1011011", "B": "1011010", "W": "101100", 
            "N": "1010111", "F": "1010110", "X": "101010", 
            "J": "101001", "M": "101000", "P": "1001111", 
            "S": "1001110", "V": "100110", "T": "100101", 
            "H": "100100", "L": "1000111", "Z": "1000110", 
            "Y": "100010", "D": "100001", "G": "100000", 
            "a": "011111", "u": "011110", "r": "01110", 
            "e": "011011", ".": "011010", "A": "01100", 
            "U": "010111", "R": "010110", "E": "01010", 
            "o": "0100", "O": "001", " ": "000"},
            453,
            85 * 8,
            'a quick brown fox jumps over the lazy dog. A QUICK BROWN FOX JUMPS OVER THE LAZY DOG.',
        ),
    ),
)
def test_shanon_fano_coder_decode(input_code, decoder, expected_code_size, expected_string_size, expected_string):
    coder = ShanonFanoCoder()

    decoded = coder.decode(input_code, decoder)

    assert decoded.code_size == expected_code_size
    assert decoded.string_size == expected_string_size

    assert decoded.string == expected_string